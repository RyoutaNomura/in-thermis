package jp.co.rn.inthermis.controllers

import jp.co.rn.inthermis.controllers.action.loadInitData.LoadInitDataAction
import jp.co.rn.inthermis.controllers.action.search.{ SearchAction, SearchCriteria }
import jp.co.rn.inthermis.daos.ResourceLocationDAO
import jp.co.rn.inthermis.logic.ResourceIndexer
import jp.co.rn.inthermis.logic.walker.{ ResourceWalkerConfig, ResourceWalkerFactory }
import jp.co.rn.inthermis.settings.ApplicationConfig
import jp.co.rn.inthermis.utils.CassandraHelper
import play.Logger
import play.api.libs.json.Json
import play.api.mvc.{ Action, AnyContent, Controller }

class Application extends Controller {

  private val logger = Logger.of(this.getClass)

  def index: Action[AnyContent] = Action {
    Ok(jp.co.rn.inthermis.views.html.index())
  }

  def loadInitData: Action[AnyContent] = Action { request =>
    Ok(Json.toJson(LoadInitDataAction.execute))
  }

  def doSearch: Action[AnyContent] = Action { request =>
    val start = System.currentTimeMillis()

    val criteria = SearchCriteria(request)
    val result = SearchAction.execute(criteria)

    logger.debug(s"${result.searchResults.size} result(s) in ${System.currentTimeMillis() - start} ms. criteria: ${criteria}");

    Ok(Json.toJson(result))
  }

  def runIndexer: Action[AnyContent] = Action {
    request =>
      val session = CassandraHelper.getSession
      try {
        ApplicationConfig.resourceWalkerConfigs.foreach { x =>
          ResourceIndexer.generateIndex(session, x)
        }
      } finally {
        session.closeAsync()
      }
      Ok
  }

  def deleteAllIndex: Action[AnyContent] = Action {
    request =>
      val session = CassandraHelper.getSession
      try {
        // configにあるやつをけす
        ApplicationConfig.resourceWalkerConfigs.foreach { x =>
          logger.debug(s"deleting indices generated by ${x.name}")
          ResourceIndexer.deleteAllIndex(session, x)
        }
        // configにないやつをけす

        // のこりをけす
        logger.debug(s"deleting reminder...")
        ResourceLocationDAO.selectAll(session).foreach { dto =>
          ResourceWalkerFactory.create(dto.resourceWalkerName).deleteLocationById(session, dto.resourceLocationId)
          logger.debug(s"deleting ${dto.resourceLocationId}")
        }
      } finally {
        session.closeAsync()
      }
      Ok
  }
}
